#!/usr/bin/env node

const fs = require('fs-extra')
const path = require('path')
const concat = require('concat');
const logger = require('@pluginjs/helper/logger')('script/generate')
const pkg =  require('../package.json')
const Terser = require('terser')
const rename = require('rename')
const getBanner = require('@pluginjs/cli/scripts/utils/banner')

const banner = getBanner()

const files = [
  '@pluginjs/polyfills',
  '@pluginjs/is',
  '@pluginjs/utils',
  '@pluginjs/simple-emitter',
  '@pluginjs/emitter',
  '@pluginjs/factory',
  '@pluginjs/component',
  '@pluginjs/global-component',
  '@pluginjs/template',
  '@pluginjs/i18n',
  '@pluginjs/dom',
  '@pluginjs/events',
  '@pluginjs/decorator',
  '@pluginjs/easing',
  '@pluginjs/feature',
  '@pluginjs/keyboard',
  '@pluginjs/classes',
  '@pluginjs/styled',
  '@pluginjs/viewport'
].map(file => path.join(file, 'package.json')).map(file => {
  const pkg =  require(file)
  return path.join('../../node_modules',path.dirname(file), pkg.umd)
})

concat(files).then(code => {
  fs.ensureFileSync(pkg.umd)
  fs.writeFileSync(pkg.umd, `${banner}\n${code}`)

  logger.success(
    `pluginjs generated → ${pkg.umd}`
  )

  let min = rename(pkg.umd, {suffix: '.min'})

  Terser.minify(code).then(result => {
    fs.ensureFileSync(min)
    fs.writeFileSync(min, `${banner}\n${result.code}`)

    logger.success(
      `pluginjs generated → ${min}`
    )
  })
})
